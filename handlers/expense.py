from aiogram import Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from model import DatabaseManager

router = Router()
db_manager = DatabaseManager()

class AddExpenseStates(StatesGroup):
    AddingAmount = State()
    AddingCategory = State()
    Confirmation = State()

@router.message(StateFilter(None), Command('add_expense'))
async def add_expense_start_handler(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id

    user = db_manager.get_user(telegram_id)
    if not user:
        await message.answer('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
        return
    
    if not db_manager.is_user_authorized(telegram_id):
        await message.answer('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.')
        return
    
    await message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    await state.set_state(AddExpenseStates.AddingAmount)

@router.message(StateFilter(AddExpenseStates.AddingAmount))
async def adding_expense_amount_handler(message: types.Message, state: FSMContext):
    amount_str = message.text.strip()
    try:
        amount = float(amount_str)
        if amount <= 0:
            await message.answer("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return
        
        await state.update_data(amount=amount)
        await message.answer("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ï–¥–∞, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç):")
        await state.set_state(AddExpenseStates.AddingCategory)

    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")

@router.message(StateFilter(AddExpenseStates.AddingCategory))
async def adding_expense_category_handler(message: types.Message, state: FSMContext):
    category_name = message.text.strip()
    if not category_name:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return

    await state.update_data(category_name_original=category_name)
    
    telegram_id = message.from_user.id
    category_type = 'expense'
    processed_category_name = category_name

    try:
        db_manager.add_category(telegram_id, category_name, category_type)
    except ValueError as ve:
        if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(ve).lower():
            existing_categories = db_manager.get_categories(telegram_id, category_type)
            for _id, name, _type in existing_categories:
                if name.lower() == category_name.lower():
                    processed_category_name = name
                    break
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ve}. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.clear()
            return
        
    except Exception as e_cat:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: {e_cat}. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return

    await state.update_data(category_name_processed=processed_category_name)
    
    data = await state.get_data()
    amount = data['amount']
    
    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:\n"
        f"üí∏ –°—É–º–º–∞: {amount}\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {processed_category_name}\n\n"
        f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å? (–î–∞/–ù–µ—Ç)"
    )
    await state.set_state(AddExpenseStates.Confirmation)